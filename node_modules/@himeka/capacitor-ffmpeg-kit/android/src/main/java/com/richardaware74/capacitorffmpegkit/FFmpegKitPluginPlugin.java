package com.richardaware74.capacitorffmpegkit;

import android.content.Context;
import android.media.MediaScannerConnection;
import android.os.Environment;
import com.arthenica.ffmpegkit.FFmpegSession;
import com.getcapacitor.JSObject;
import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginMethod;
import com.getcapacitor.annotation.CapacitorPlugin;
import com.arthenica.ffmpegkit.FFmpegKit;
import java.io.File;

@CapacitorPlugin(name = "FFmpegKitPlugin")
public class FFmpegKitPluginPlugin extends Plugin {

    private FFmpegKitPlugin implementation = new FFmpegKitPlugin();

    @PluginMethod
    public void execute(PluginCall call) {
        String command = call.getString("command");
        if (command == null) {
            call.reject("Command is required");
            return;
        }

        FFmpegSession session = FFmpegKit.execute(command);

        JSObject ret = new JSObject();
        ret.put("returnCode", session.getReturnCode());
        call.resolve(ret);
    }

    @PluginMethod
    public void scanFile(PluginCall call) {
        try {
            String directory = call.getString("directory", "DOWNLOADS");
            String path = call.getString("path");
            File dir = getDirectory(directory);
            File file = new File(dir, path);
            MediaScannerConnection.scanFile(getContext(), new String[] { file.getAbsolutePath() }, null, null);
            call.resolve();
        } catch (Exception ex) {
            call.reject("Error scanning file: " + ex.getLocalizedMessage(), ex);
        }
    }

    private File getDirectory(String directory) {
        Context c = getContext();
        switch (directory) {
            case "DOWNLOADS":
                return Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);
            case "PICTURES":
                return Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
            case "DOCUMENTS":
                return Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
            case "DATA":
            case "LIBRARY":
                return c.getFilesDir();
            case "CACHE":
                return c.getCacheDir();
            case "EXTERNAL":
                return c.getExternalFilesDir(null);
            case "EXTERNAL_STORAGE":
                return Environment.getExternalStorageDirectory();
        }
        return null;
    }
}
